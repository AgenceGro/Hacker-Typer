#
#
#   .d8888b.
#  d88P  Y88b
#  888    888
#  888        888d888 .d88b.
#  888  88888 888P"  d88""88b
#  888    888 888    888  888
#  Y88b  d88P 888    Y88..88P
#   "Y8888P88 888     "Y88P"
#
#
#  Copyright (c) 2069, Agence Gro.
#  https://agencegro.ca/
#  All rights reserved.
#
#include "memory_utility.h"
#include <future>
#include <Windows.h>

uintptr_t mafia::memory_utility::find_in_memory(
        uintptr_t baseAddress,
        uintptr_t moduleSize,
        const char* pattern,
        size_t patternLength
)
{
    for (uintptr_t i = 0; i < moduleSize - patternLength; i++)
    {
        bool found = true;
        for (uintptr_t j = 0; j < patternLength; j++)
        {
            found &= pattern[j] == *reinterpret_cast<char*>(baseAddress + i + j);
            if (!found)
            {
                break;
            }
        }

        if (found)
        {
            return baseAddress + i;
        }
    }
    return 0;
}

uintptr_t mafia::memory_utility::find_in_memory_pattern(
        uintptr_t baseAddress, uintptr_t moduleSize, const char* pattern, const char* mask, uintptr_t offset
)
{
    const auto patternLength = static_cast<uintptr_t>(strlen(mask));

    for (uintptr_t i = 0; i < moduleSize - patternLength; i++)
    {
        bool found = true;
        for (uintptr_t j = 0; j < patternLength; j++)
        {
            found &= mask[j] == '?' || pattern[j] == *reinterpret_cast<char*>(baseAddress + i + j);
            if (!found)
            {
                break;
            }
        }

        if (found)
        {
            return baseAddress + i + offset;
        }
    }
    return static_cast<uintptr_t>(0x0u);
}

const char* mafia::memory_utility::get_RTTI_name(uintptr_t vtable)
{
    class v1
    {
        virtual void doStuff() {}
    };
    class v2: public v1
    {
        virtual void doStuff() {}
    };
    v2* v = (v2*) vtable;
    auto& typex = typeid(*v);
#ifdef __GNUC__
    auto test = typex.name();
#else
    auto test = typex.raw_name();
#endif
    return test;
}

bool mafia::memory_utility::ptr_check(void* p)
{
    MEMORY_BASIC_INFORMATION mbi = {nullptr};
    if (::VirtualQuery(p, &mbi, sizeof(mbi)))
    {
        DWORD mask = (PAGE_READONLY | PAGE_READWRITE | PAGE_WRITECOPY | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE |
                      PAGE_EXECUTE_WRITECOPY);
        bool b = !(mbi.Protect & mask);
        // check the page is not a guard page
        if (mbi.Protect & (PAGE_GUARD | PAGE_NOACCESS))
        { b = true; }

        return b;
    }
    return true;
}

using namespace mafia;
using namespace std::literals::string_view_literals;

RVController::RVController(): _async_executor(3) {}

RVController::~RVController() = default;

void RVController::initialize(uintptr_t stack_base)
{
    _invoker = std::make_shared<Invoker>(*this);
    _loader = std::make_shared<Loader>();
    _sqf_functions = std::make_shared<SQFFunctions>();
    _mission_events = std::make_shared<MissionEvents>();
    _loader->init(stack_base);
    _mission_events->initialize();

    // @TODO Load config file

    _ssh_server = std::make_unique<SSHServer>("test"sv, "test"sv, 23456);

    _javascript_runtime = std::make_unique<Runtime>(
            R"(@mafia\mafia-runtime-javascript.dll)"
    );
    _javascript_runtime->api().initialize();
}

void RVController::shutdown()
{
    if (_javascript_runtime)
    {
        _javascript_runtime->api().shutdown();
        _javascript_runtime = nullptr;
    }

    _mission_events->shutdown();

    _mission_events = nullptr;
    _invoker = nullptr;
    _sqf_functions = nullptr;
    _loader = nullptr;
}

std::string RVController::rv_call(std::string_view command, Arguments& args)
{
    // Find a handler for the given command
    auto handler_it = _command_handlers.find(std::string {command});

    if (handler_it == _command_handlers.end())
    {
        // No such command registered
        return "<unknown command>";
    }

    // Execute command
    return handler_it->second(args);
}

void RVController::on_game_frame()
{
    run_tasks();
}

bool RVController::rv_signal(
        const std::string& extension_name,
        const std::string& signal_name,
        const game_types::GameValue& args
)
{
    // @TODO
    /*auto signal_module = extensions::get().modules().find(extension_name);
    if (signal_module == extensions::get().modules().end()) {
        return false;
    }
    auto signal_func_it = signal_module->second.signal_funcs.find(signal_name);
    module::on_signal_func signal_func;
    if (signal_func_it == signal_module->second.signal_funcs.end()) {

		// #TODO why?! The signal module function thingy is commented out.. also has a #TODO with ?! on it
        signal_func = reinterpret_cast<module::on_signal_func>(GetProcAddress(signal_module->second.dll_handle, signal_name.c_str())); 

        if (!signal_func)
            return false;
        else
            signal_module->second.signal_funcs[signal_name] = signal_func;
    } else {
        signal_func = signal_func_it->second;
    }
    _invoker_unlock signal_lock(this);
    signal_func(args);*/
    return true;
}

bool RVController::add_rv_command_handler(
        std::string_view command,
        RVController::RVCommandHandler_t handler
)
{
    auto already_registered = _command_handlers.find(std::string {command});
    if (already_registered != _command_handlers.end())
    {
        // Handler already defined for this command
        return false;
    }

    _command_handlers.insert(
            std::make_pair<std::string, RVCommandHandler_t>(
                    std::string {command},
                    std::move(handler)));

    return true;
}

std::shared_ptr<Loader> RVController::get_loader()
{
    return _loader;
}

std::shared_ptr<SQFFunctions> RVController::get_sqf_functions()
{
    return _sqf_functions;
}

std::shared_ptr<Invoker> RVController::get_invoker()
{
    return _invoker;
}

std::shared_ptr<MissionEvents> RVController::get_mission_events()
{
    return _mission_events;
}

void RVController::post_task_async(TaskExecutor::Task_t&& t)
{
    _async_executor.post_task(std::move(t));
}

void
RVController::post_task_async(TaskExecutor::Task_t&& task, TaskExecutor::Task_t&& then, TaskExecutor& then_executor)
{
    _async_executor.post_task(std::move(task), std::move(then), then_executor);
}

void RVController::try_load_module(
        std::string_view name,
        RVController::ModuleLoadCompleteFunction_t&& then_
)
{
    try
    {
        auto new_module = Module::try_load(std::string {name}, (*_javascript_runtime));
        _javascript_runtime->loaded_modules.push_back(new_module);
        _javascript_runtime->post_task(
                [then = std::forward<RVController::ModuleLoadCompleteFunction_t>(then_), new_module]() {
                    then(new_module);
                }
        );
    }
    catch (const std::exception& e)
    {
        log::warn("Could not load module in directory `{}`: {}", name, e.what());
        throw e;
    }
}

void RVController::try_unload_module(
        std::string_view name,
        RVController::ModuleUnloadCompleteFunction_t&& then
)
{

}

RuntimeAPI& RVController::javascript_runtime()
{
    return _javascript_runtime->api();
}
